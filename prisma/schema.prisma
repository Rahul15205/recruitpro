generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  role          UserRole  @default(APPLICANT)
  profileInfo   Json?     // Additional profile information
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  applications  Application[]
  jobs          Job[]     // For admins who create jobs

  @@map("users")
}

model Job {
  id            String        @id @default(cuid())
  title         String
  department    String
  location      String
  salary        String?
  description   String
  requirements  String?
  customFields  Json?         // Custom questions for this job
  status        JobStatus     @default(ACTIVE)
  requiresResume Boolean      @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  createdBy     String
  creator       User          @relation(fields: [createdBy], references: [id])
  applications  Application[]

  @@map("jobs")
}

model Application {
  id            String            @id @default(cuid())
  answers       Json?             // Answers to custom questions
  resumeUrl     String?           // URL to uploaded resume
  resumePreviewUrl String?        // URL to preview image of resume
  status        ApplicationStatus @default(PENDING)
  notes         String?           // Admin notes
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  userId        String
  jobId         String
  user          User              @relation(fields: [userId], references: [id])
  job           Job               @relation(fields: [jobId], references: [id])

  // Action logs
  actionLogs    ActionLog[]

  @@unique([userId, jobId]) // User can only apply once per job
  @@map("applications")
}

model ActionLog {
  id            String      @id @default(cuid())
  action        String      // "APPLIED", "ACCEPTED", "REJECTED", "ON_HOLD"
  timestamp     DateTime    @default(now())
  performedBy   String?     // Admin who performed the action

  // Relations
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])

  @@map("action_logs")
}

enum UserRole {
  ADMIN
  APPLICANT
}

enum JobStatus {
  ACTIVE
  CLOSED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  ON_HOLD
}
